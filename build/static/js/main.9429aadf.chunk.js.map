{"version":3,"sources":["dmAppointment.ts","main_machine.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","yes_no_grammar","yes_no","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","whole_day","confirm_whole_day","confirm_time_appointment","confirm_appointment","confirm","promptAndAsk","dmMainMachine","query","invocation","invoke","id","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","output","intent","name","console","log","onError","go_to","appointment_machine","todo","set_timer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.9429aadf.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    // Person:\n    \"John\": { person: \"John Appleseed\" },\n    \"Jamal\": { person: \"Jamal Youssef\" },\n    \"Jennifer\": { person: \"Jennifer Lawrence\" },\n    \"Sophia\": { person: \"Sophia Bush\" },\n    \"Morgan\": { person: \"Morgan Freeman\" },\n    \"Tom\": { person: \"Tom Hanks\" },\n\n    // Day:\n    \"on Monday\" : { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \n    // Time:\n    \"at 6\": { time: \"6 am\" },\n    \"at 7\": { time: \"7 am\" },\n    \"at 8\": { time: \"8 am\" },\n    \"at 9\": { time: \"9 am\" },\n    \"at 10\": { time: \"10 am\"},\n    \"at 11\": { time: \"11 am\"},\n    \"at 12\": { time: \"12 pm\"},\n}\n\nconst yes_no_grammar: { [index: string]: { yes_no?: boolean } } = {\n    // Approve:\n    \"yes\": { yes_no : true },\n    \"yes, please\": { yes_no: true },\n    \"of course\": { yes_no: true },\n    \"no doubt\": { yes_no: true },\n    \"absolutely\": { yes_no: true },\n    \"yep\": { yes_no: true },\n    \"I do\": { yes_no: true },\n    \"go ahead\": { yes_no: true },\n\n    // Disapprove:\n    \"no\": { yes_no: false },\n    \"no, I don't\": { yes_no: false },\n    \"no way\": { yes_no: false },\n    \"of course not\": { yes_no: false },\n    \"nope\": { yes_no: false },\n    \"hell not\": { yes_no: false },\n    \"not sure\": { yes_no: false },\n\n}\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them! Please choose who you're meeting with.\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        day: {\n            \n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day\"\n                },\n                    { target: \".nomatch\" }],\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH:\"ask\" } \n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"If you seek an appointment during the weekend, that's not possible. Please choose another day\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            },\n        \n        },\n        whole_day: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [\n                    { target: 'confirm_whole_day', cond: (context) => yes_no_grammar[context.recResult].yes_no === true },\n                    { target: 'time', cond: (context) => yes_no_grammar[context.recResult].yes_no === false },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand what you said, Can you repeat?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        \n        confirm_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'confirm_appointment', cond: (context) => yes_no_grammar[context.recResult].yes_no === true },\n                    { target: 'who', cond: (context) => yes_no_grammar[context.recResult].yes_no === false },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} \n                                    on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand what you said, Can you repeat?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time_appointment\"\n                },\n                { target: \".nomatch\" }],\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry the time you chose is not available. Please choose a different time!\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        confirm_time_appointment: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'confirm_appointment', cond: (context) => yes_no_grammar[context.recResult].yes_no === true },\n                    { target: 'who', cond: (context) => yes_no_grammar[context.recResult].yes_no === false },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} \n                                    on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand what you said, Can you repeat?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        confirm_appointment: {\n            initial: 'confirm',\n            states: {\n                confirm: {\n                    entry: say('Your appointment has been created'),\n                }\n            }\n        }\n    }\n\n\n})\n","import { MachineConfig, send, assign, Action } from \"xstate\";\nimport { dmMachine, say, listen } from \"./dmAppointment\"\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://create-appointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nexport const dmMainMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: 'invocation',\n                    actions: assign((context) => { return { query: context.recResult } }),\n                }\n            },\n            ...promptAndAsk(\"What do you want to do?\")\n        },\n        invocation: {\n            invoke: {\n                id: 'machine',\n                src: (context, event) => nluRequest(context.query),\n                onDone: {\n                    target: 'go_to',\n                    actions: [assign((context, event) => { return { output: event.data.intent.name } }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        go_to: {\n            entry: send(\"RECOGNISED\"),\n            on: {\n                RECOGNISED: [\n                    { target: 'appointment_machine', cond: (context) => context.output === \"appointment\" },\n                    { target: 'todo', cond: (context) => context.output === \"to_do\" },\n                    { target: 'set_timer', cond: (context) => context.output === \"timer\" }]\n            }\n        },\n\n        appointment_machine: {\n            ...dmMachine\n        },\n\n        todo: {\n            initial:\"prompt\",\n            states:{\n                prompt: {\n                    ...promptAndAsk(\"I'll add a new item to you to_do list?\")\n                } \n            }\n        },\n\n        set_timer: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    ...promptAndAsk(\"I will set a new timer?\")\n                }\n            }\n        }\n        \n    }\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMainMachine } from \"./main_machine\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMainMachine\n        },\n\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive an answer.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://create-appointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) => \n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}