{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","grammar","person","day","time","yes_no_grammar","yes_no","maxTimeouts","assign","context","counts","cond","zeroTimeouts","machineStates","prompt","nomatch","timeoutReprompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","finalReprompt","dmMachine","start","hist","init","CLICK","welcome","who","RECOGNISED","target","recResult","MAXSPEECH","whole_day","confirm_whole_day","confirm_time_appointment","confirm_appointment","help","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"4QAEQA,EAAiBC,IAAjBD,KAAiBC,IAAXC,OAGP,SAASC,EAAIC,GAChB,OAAOJ,GAAMK,IAAD,CAA6BC,KAAM,QAASC,MAAOH,MASnE,MAAMI,EAAiF,CAEnF,KAAQ,CAAEC,OAAQ,kBAClB,MAAS,CAAEA,OAAQ,iBACnB,SAAY,CAAEA,OAAQ,qBACtB,OAAU,CAAEA,OAAQ,eACpB,OAAU,CAAEA,OAAQ,kBACpB,IAAO,CAAEA,OAAQ,aAGjB,YAAa,CAAEC,IAAK,UACpB,aAAc,CAAEA,IAAK,WACrB,eAAgB,CAAEA,IAAK,aACvB,cAAe,CAAEA,IAAK,YACtB,YAAa,CAAEA,IAAK,UAGpB,OAAQ,CAAEC,KAAM,QAChB,OAAQ,CAAEA,KAAM,QAChB,OAAQ,CAAEA,KAAM,QAChB,OAAQ,CAAEA,KAAM,QAChB,QAAS,CAAEA,KAAM,SACjB,QAAS,CAAEA,KAAM,SACjB,QAAS,CAAEA,KAAM,UAGfC,EAA4D,CAE9D,IAAO,CAAEC,QAAQ,GACjB,cAAe,CAAEA,QAAQ,GACzB,YAAa,CAAEA,QAAQ,GACvB,WAAY,CAAEA,QAAQ,GACtB,WAAc,CAAEA,QAAQ,GACxB,IAAO,CAAEA,QAAQ,GACjB,OAAQ,CAAEA,QAAQ,GAClB,WAAY,CAAEA,QAAQ,GAGtB,GAAM,CAAEA,QAAQ,GAChB,cAAe,CAAEA,QAAQ,GACzB,SAAU,CAAEA,QAAQ,GACpB,gBAAiB,CAAEA,QAAQ,GAC3B,KAAQ,CAAEA,QAAQ,GAClB,WAAY,CAAEA,QAAQ,GACtB,WAAY,CAAEA,QAAQ,IAG1B,SAASC,IACL,MAAO,CAACb,QAASc,aAAQC,IAAgC,CAAEC,OAAQD,EAAQC,OAASD,EAAQC,OAAS,EAAI,MACrGC,KAAOF,GAAyC,MAAlBA,EAAQC,QAAkBD,EAAQC,OAAS,GACjF,SAASE,IACL,MAAO,CAAClB,QAASc,aAAQC,IAAiC,CAAEC,OAAQ,MAChEC,KAAOF,GAAwBA,EAAQC,QAAU,GAEzD,SAASG,EAAcC,EAAsCC,EAAiBC,GAC1E,MAAQ,CACJC,QAAS,SACTC,OAAQ,CACJJ,OAAQ,CACJK,MAAOL,EACPM,GAAI,CAAEC,UAAW,QAErBC,IAAK,CACDH,MAAO,CAAC1B,EAAK,UAAWA,EAAK,YAAa,CAAC8B,MAAO,IAAMC,GAAI,gBAGhET,QAAS,CACLI,MAAOvB,EAAImB,GACXK,GAAI,CAAEC,UAAW,QAGrBL,gBAAiB,CACbG,MAAOH,EACPI,GAAI,CAAEC,UAAW,QAGrBI,cAAe,CACXN,MAAOvB,EAAI,uEACXwB,GAAI,CAAEC,UAAW,8BAQ1B,MAAMK,EAAuD,CAChET,QAAS,QACTO,GAAI,cACJN,OAAQ,CACJS,MAAM,CACFV,QAAS,OACTC,OAAO,CACHU,KAAM,CAAE7B,KAAM,WACd8B,KAAM,CACFT,GAAI,CACAU,MAAO,YAGfC,QAAS,CACLd,QAAS,SACTG,GAAI,CAAEC,UAAW,OACjBH,OAAQ,CACJJ,OAAQ,CAAEK,MAAOvB,EAAI,kCAI7BoC,IAAI,aACAZ,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAQF,GAAkC,SAAtBA,EAAQ0B,WAC3D,CAACxB,KAAOF,GAAY,WAAaR,EAAQQ,EAAQ0B,YAAc,IAC/DzC,QAASc,aAAQC,IAAoB,CAACP,OAAQD,EAAQQ,EAAQ0B,WAAWjC,WACzEgC,OAAQ,OACR,CAAEA,OAAQ,aAEdE,UAAU,CAAC,2BAAI7B,KAAL,IAAoB2B,OAAQ,qBAA5B,2BACEtB,KADF,IACkBsB,OAAQ,sBAGrCrB,EAAcjB,EAAI,6BACrB,kEACAA,EAAI,mFAERO,IAAI,aACAiB,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAOF,GAAkC,SAAtBA,EAAQ0B,WAC1D,CAACxB,KAAOF,GAAY,QAAUR,EAAQQ,EAAQ0B,YAAc,IAC5DzC,QAASc,aAAQC,IAAqB,CAAEN,IAAKF,EAAQQ,EAAQ0B,WAAWhC,QACxE+B,OAAQ,aACR,CAAEA,OAAQ,aAEdE,UAAW,CAAC,2BAAK7B,KAAN,IAAqB2B,OAAQ,qBAA7B,2BACNtB,KADM,IACUsB,OAAQ,sBAG9BrB,EAAcpB,GAAMgB,IAAD,CAClBV,KAAM,QACNC,MAAM,OAAD,OAASS,EAAQP,OAAjB,uCACL,gGACAT,GAAMgB,IAAD,CACDV,KAAM,QACNC,MAAM,+EAAD,OAAiFS,EAAQP,OAAzF,WAMjBmC,UAAU,aACNjB,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAOF,GAAkC,SAAtBA,EAAQ0B,WAC1D,CACIxB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,qBAEZ,CACIvB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,QAEZ,CAAEA,OAAQ,aAEdE,UAAW,CAAC,2BAAK7B,KAAN,IAAqB2B,OAAQ,qBAA7B,2BACNtB,KADM,IACUsB,OAAQ,sBAE9BrB,EAAcjB,EAAI,+BACjB,0DACAA,EAAI,6GAGZ0C,kBAAkB,aACdrB,QAAS,SACTG,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAOF,GAAkC,SAAtBA,EAAQ0B,WAC1D,CACIxB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,uBAEZ,CACIvB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,OAEZ,CAAEA,OAAQ,aAEdE,UAAW,CAAC,2BAAK7B,KAAN,IAAqB2B,OAAQ,qBAA7B,2BACNtB,KADM,IACUsB,OAAQ,sBAE9BrB,EAAcpB,GAAMgB,IAAD,CAClBV,KAAM,QACNC,MAAM,gDAAD,OAAkDS,EAAQP,OAA1D,6DACoBO,EAAQN,IAD5B,2BAEL,0DAA2DV,GAAMgB,IAAD,CAC5DV,KAAM,QACNC,MAAM,kJAAD,OAC+BS,EAAQP,OADvC,eACoDO,EAAQN,IAD5D,qDAKjBC,KAAK,aACDa,QAAS,SACTG,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAOF,GAAkC,SAAtBA,EAAQ0B,WAC1D,CAACxB,KAAOF,GAAY,SAAWR,EAAQQ,EAAQ0B,YAAc,IAC7DzC,QAASc,aAAQC,IAAqB,CAAEL,KAAMH,EAAQQ,EAAQ0B,WAAW/B,SACzE8B,OAAQ,4BACR,CAAEA,OAAQ,aAEdE,UAAW,CAAC,2BAAK7B,KAAN,IAAqB2B,OAAQ,qBAA7B,2BACNtB,KADM,IACUsB,OAAQ,sBAE9BrB,EAAcjB,EAAI,8BACrB,6EACIA,EAAI,gCAKZ2C,yBAAyB,aACrBtB,QAAS,SACTG,GAAI,CACAa,WAAY,CACR,CAAEC,OAAQ,oBAAqBvB,KAAOF,GAAkC,SAAtBA,EAAQ0B,WAC1D,CACIxB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,uBAEZ,CACIvB,KAAOF,KAAYJ,EAAeI,EAAQ0B,aAA0D,IAA7C9B,EAAeI,EAAQ0B,WAAW7B,OACzF4B,OAAQ,OAEZ,CAAEA,OAAQ,aAEdE,UAAW,CAAC,2BAAK7B,KAAN,IAAqB2B,OAAQ,qBAA7B,2BACNtB,KADM,IACUsB,OAAQ,sBAI9BrB,EAAcpB,GAAMgB,IAAD,CAClBV,KAAM,QACNC,MAAM,gDAAD,OAAkDS,EAAQP,OAA1D,6DACoBO,EAAQN,IAD5B,eACsCM,EAAQL,KAD9C,SAEL,0DAA2DX,GAAMgB,IAAD,CAC5DV,KAAM,QACNC,MAAM,kJAAD,OAC+BS,EAAQP,OADvC,eACoDO,EAAQN,IAD5D,eACsEM,EAAQL,KAD9E,mCAKjBoC,oBAAqB,CACjBrB,MAAOvB,EAAI,+CACXwB,GAAI,CAAEC,UAAW,8BAU7BoB,KAAM,CACFtB,MAAOvB,EAAI,yCACXwB,GAAI,CAAEC,UAAW,iB,0BChRrB5B,EAAiBC,IAAjBD,KAAME,EAAWD,IAAXC,OAEd+C,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAMZ,MAAMC,EAAUC,YAAmC,CAC/CtB,GAAI,OACJzB,KAAM,WACNmB,OAAQ,CACJ6B,GAAG,eACIrB,GAEPsB,OAAQ,CACJ/B,QAAS,OACTC,OAAQ,CACJ+B,KAAM,CACF7B,GAAI,CACA8B,OAAQ,cACRC,MAAO,CACHjB,OAAQ,WACRxC,QAASc,aAAO,CAACV,EAAUsD,KAAmB,CAAEC,UAAWD,EAAMpD,aAI7EsD,YAAa,CACTrC,QAAS,WACTE,MAAO,WACPoC,KAAM,UACNnC,GAAI,CACAoC,UAAW,CACP9D,QAAS,CAAC,eACNc,aAAO,CAACV,EAAUsD,KAAmB,CAAEjB,UAAWiB,EAAMpD,WAC5DkC,OAAQ,UAEZD,WAAY,CACRC,OAAQ,OAAQxC,QAAS,CAACC,EAAO,aAAca,aAAQC,IAAqB,CAAEC,OAAQ,QAE1F0B,UAAU,QAEdlB,OAAQ,CACJuC,SAAU,GAEVC,MAAO,CACHvC,MAAO1B,EAAK,iBAIxBkE,SAAU,CACNxC,MAAO,WACPC,GAAI,CACAC,UAAW,aAO/B,CACI3B,QAAS,CACLkE,aAAenD,IAEXoD,QAAQC,IAAI,WAAarD,EAAQ0B,YAErC4B,KAAM,KACFF,QAAQC,IAAI,SAEhBE,UAAYvD,IAERoD,QAAQC,IAAI,kBAAoBrD,EAAQwD,QAAQC,OAAOC,UAUjEC,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,gBAC/B,OACI,gDAAQjD,KAAK,SAASyE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,aAC/B,OACI,gDAAQjD,KAAK,SAASyE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQtE,KAAK,SAASyE,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHpF,EAAK,gBAFLqF,EADG,EACHA,MAAOnF,EADJ,EACIA,OADJ,KACYgE,SAKaoB,+BAAqB,CACrDC,SAAWC,IACPxF,EAAK,CAAEM,KAAM,YAAaC,MAAOiF,QAFjCC,EANG,EAMHA,OAAmBC,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWxC,EAAS,CACjDyC,UAAU,EACV5F,QAAS,CACL6F,SAAUC,aAAS,KACf3B,QAAQC,IAAI,+BACZoB,EAAO,CACHO,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACd3B,QAAQC,IAAI,wBACZqB,OAEJS,aAAcJ,aAAU/E,IACpBoD,QAAQC,IAAI,iBACZ+B,SAASC,KAAKrB,MAAMsB,WAAatF,EAAQ0B,aAE7C6D,SAAUR,aAAS,CAAC/E,EAASwF,KACzBpC,QAAQC,IAAI,eACZgB,EAAM,CAAEjF,KAAMY,EAAQ4C,eAE1B6C,UAAWV,aAAS,CAAC/E,EAASwF,KAC1BpC,QAAQC,IAAI,eACZnE,UAnCD,mBAWJwG,EAXI,KAWK1G,EAXL,UA6CX,OACI,qBAAK+E,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO6B,EAASC,QAAS,IAAM3G,EAAK,aAShE,MAUM4G,EAAcR,SAASS,eAAe,QAC5CC,SACI,cAAC5B,EAAD,IACA0B,K","file":"static/js/main.ba06a6c6.chunk.js","sourcesContent":["import { MachineConfig, Action, assign , actions} from \"xstate\";\n\nconst { send, cancel } = actions;\n\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    // Person:\n    \"John\": { person: \"John Appleseed\" },\n    \"Jamal\": { person: \"Jamal Youssef\" },\n    \"Jennifer\": { person: \"Jennifer Lawrence\" },\n    \"Sophia\": { person: \"Sophia Bush\" },\n    \"Morgan\": { person: \"Morgan Freeman\" },\n    \"Tom\": { person: \"Tom Hanks\" },\n\n    // Day:\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\n    // Time:\n    \"at 6\": { time: \"6 am\" },\n    \"at 7\": { time: \"7 am\" },\n    \"at 8\": { time: \"8 am\" },\n    \"at 9\": { time: \"9 am\" },\n    \"at 10\": { time: \"10 am\" },\n    \"at 11\": { time: \"11 am\" },\n    \"at 12\": { time: \"12 pm\" },\n}\n\nconst yes_no_grammar: { [index: string]: { yes_no?: boolean } } = {\n    // Approve:\n    \"yes\": { yes_no: true },\n    \"yes, please\": { yes_no: true },\n    \"of course\": { yes_no: true },\n    \"no doubt\": { yes_no: true },\n    \"absolutely\": { yes_no: true },\n    \"yep\": { yes_no: true },\n    \"I do\": { yes_no: true },\n    \"go ahead\": { yes_no: true },\n\n    // Disapprove:\n    \"no\": { yes_no: false },\n    \"no, I don't\": { yes_no: false },\n    \"no way\": { yes_no: false },\n    \"of course not\": { yes_no: false },\n    \"nope\": { yes_no: false },\n    \"hell not\": { yes_no: false },\n    \"not sure\": { yes_no: false },\n\n}\nfunction maxTimeouts () : any {\n    return {actions: assign((context:SDSContext) => { return { counts: context.counts ? context.counts + 1 : 1 } }),\n        cond: (context:SDSContext) => context.counts == null || context.counts < 3 }}\nfunction zeroTimeouts () : any {\n    return {actions: assign((context: SDSContext) => { return { counts: 0 } }),\n        cond: (context: SDSContext) => context.counts >= 3 }}\n\nfunction machineStates(prompt: Action<SDSContext, SDSEvent>, nomatch: string, timeoutReprompt: Action<SDSContext, SDSEvent> ): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: prompt,\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: \"countdown\"})]\n            },\n\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"ask\" }\n            },\n\n            timeoutReprompt: {\n                entry: timeoutReprompt,\n                on: { ENDSPEECH: \"ask\" }\n            },\n\n            finalReprompt: {\n                entry: say(\"You do not seem to be here, I guess we'll talk later then, see you!\"),\n                on: { ENDSPEECH: \"#appointment.start.init\", }\n\n            }\n        }\n\n    })\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({ \n    initial: 'start',\n    id: \"appointment\",\n    states: {\n        start:{\n            initial: \"init\",\n            states:{\n                hist: { type: 'history'},\n                init: {\n                    on: {\n                        CLICK: 'welcome'\n                    }\n                },\n                welcome: {\n                    initial: \"prompt\",\n                    on: { ENDSPEECH: \"who\" },\n                    states: {\n                        prompt: { entry: say(\"Let's create an appointment\") }\n                    }\n                },\n\n                who: {     \n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: ((context) => context.recResult === 'help' ) },\n                            {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => {return {person: grammar[context.recResult].person}}),\n                            target: \"day\"},\n                            { target: \".nomatch\"}],\n                        \n                        MAXSPEECH:[{...maxTimeouts(), target: \".timeoutReprompt\"},  \n                                {...zeroTimeouts(), target: \".finalReprompt\"}]\n\n                    },  \n                    ...machineStates(say(\"Who are you meeting with?\"),\n                    \"Sorry I don't know them! Please choose who you're meeting with.\",\n                    say(\"You haven't responded yet! Would you please tell us, who you're meeting with?\"))\n                },\n                day: {\n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: (context) => context.recResult === 'help' },\n                            {cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                            target: \"whole_day\"},\n                            { target: \".nomatch\" }],\n\n                        MAXSPEECH: [{ ...maxTimeouts(), target: \".timeoutReprompt\" },\n                        { ...zeroTimeouts(), target: \".finalReprompt\" }]\n                    },\n\n                    ...machineStates(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`})),\n                        \"If you seek an appointment during the weekend, that's not possible. Please choose another day\",\n                        send((context) => ({\n                            type: \"SPEAK\",\n                            value: `You haven't responded yet! Now, please choose on which day you want to meet ${context.person}.`\n                        })))\n\n                   \n\n                },\n                whole_day: {\n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: (context) => context.recResult === 'help' },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === true : false,\n                                target: \"confirm_whole_day\"\n                            },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === false : false,\n                                target: \"time\"\n                            },\n                            { target: \".nomatch\" }],\n\n                        MAXSPEECH: [{ ...maxTimeouts(), target: \".timeoutReprompt\" },\n                        { ...zeroTimeouts(), target: \".finalReprompt\" }]\n                    },\n                    ...machineStates(say(\"Will it take the whole day?\"),\n                        \"Sorry I don't understand what you said, Can you repeat?\",\n                        say(\"You haven't responded yet! Would you please confirm if your meeting is going to last for the whole day?\") )\n                },\n\n                confirm_whole_day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: (context) => context.recResult === 'help' },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === true : false,\n                                target: \"confirm_appointment\"\n                            },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === false : false,\n                                target: \"who\"\n                            },\n                            { target: \".nomatch\" }],\n\n                        MAXSPEECH: [{ ...maxTimeouts(), target: \".timeoutReprompt\" },\n                        { ...zeroTimeouts(), target: \".finalReprompt\" }]\n                    },\n                    ...machineStates(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} \n                                            on ${context.day} for the whole day?`})),\n                        \"Sorry I don't understand what you said, Can you repeat?\", send((context) => ({\n                            type: \"SPEAK\",\n                            value: `\"You haven't responded yet! Would you please confirm your appointment details?\n                            I will create an appointment with ${context.person} on ${context.day} for the whole day, does that work for you?`\n                        }))),\n                },\n\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: (context) => context.recResult === 'help' },\n                            {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                            target: \"confirm_time_appointment\"},\n                            { target: \".nomatch\" }],\n                        \n                        MAXSPEECH: [{ ...maxTimeouts(), target: \".timeoutReprompt\" },\n                        { ...zeroTimeouts(), target: \".finalReprompt\" }]\n                    },\n                    ...machineStates(say(\"What time is your meeting?\"), \n                    \"Sorry the time you chose is not available. Please choose a different time!\",\n                        say(\"What time is your meeting?\"))\n\n                   \n                },\n\n                confirm_time_appointment: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            { target: '#appointment.help', cond: (context) => context.recResult === 'help' },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === true : false,\n                                target: \"confirm_appointment\"\n                            },\n                            {\n                                cond: (context) => yes_no_grammar[context.recResult] ? yes_no_grammar[context.recResult].yes_no === false : false,\n                                target: \"who\"\n                            },\n                            { target: \".nomatch\" }],\n                        \n                        MAXSPEECH: [{ ...maxTimeouts(), target: \".timeoutReprompt\" },\n                        { ...zeroTimeouts(), target: \".finalReprompt\" }]\n\n                    },\n\n                    ...machineStates(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} \n                                            on ${context.day} at ${context.time}?`})),\n                        \"Sorry I don't understand what you said, Can you repeat?\", send((context) => ({\n                            type: \"SPEAK\",\n                            value: `\"You haven't responded yet! Would you please confirm your appointment details?\n                            I will create an appointment with ${context.person} on ${context.day} at ${context.time}, does that work for you?`\n                        }))),\n                  \n                },\n                confirm_appointment: {\n                    entry: say('Your appointment has been created! See you!'),\n                    on: { ENDSPEECH: \"#appointment.start.init\" }\n                    // initial: 'confirm',\n                    // states: {\n                    //     confirm: {\n                    //         entry: say('Your appointment has been created'),\n                    //     }\n                    // }\n                }\n            }\n        },\n        help: {\n            entry: say(\"Don't panic, we can go one step back!\"),\n            on: { ENDSPEECH: \"start.hist\" }\n        }\n    }\n\n\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, State, actions } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n// import { dmMachine } from \"./dmSmartHome\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\nconst { send, cancel } = actions;\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            target: 'idle', actions: [cancel('countdown'), assign((context) => { return { counts: 0 } })]\n                        },\n                        MAXSPEECH:'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}